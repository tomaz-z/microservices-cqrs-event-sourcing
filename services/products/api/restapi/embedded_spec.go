// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for handling products.",
    "title": "Products",
    "version": "1.0.0"
  },
  "basePath": "/products",
  "paths": {
    "/": {
      "get": {
        "description": "Get all products.",
        "tags": [
          "products"
        ],
        "operationId": "Products",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductList"
            }
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      },
      "post": {
        "description": "Add a product.",
        "tags": [
          "products"
        ],
        "operationId": "Add",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "description": "Get product by ID.",
        "tags": [
          "products"
        ],
        "operationId": "Product",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Product's ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "NotFound"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      },
      "patch": {
        "description": "Partially update a product.",
        "tags": [
          "products"
        ],
        "operationId": "Patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Products's ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Product data.",
            "name": "product",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PatchProduct"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "PatchProduct": {
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "Product": {
      "required": [
        "name",
        "description",
        "quantity",
        "price"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProductList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Product"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for handling products.",
    "title": "Products",
    "version": "1.0.0"
  },
  "basePath": "/products",
  "paths": {
    "/": {
      "get": {
        "description": "Get all products.",
        "tags": [
          "products"
        ],
        "operationId": "Products",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductList"
            }
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      },
      "post": {
        "description": "Add a product.",
        "tags": [
          "products"
        ],
        "operationId": "Add",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "description": "Get product by ID.",
        "tags": [
          "products"
        ],
        "operationId": "Product",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Product's ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "NotFound"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      },
      "patch": {
        "description": "Partially update a product.",
        "tags": [
          "products"
        ],
        "operationId": "Patch",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Products's ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Product data.",
            "name": "product",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PatchProduct"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "PatchProduct": {
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32",
          "x-nullable": true
        }
      }
    },
    "Product": {
      "required": [
        "name",
        "description",
        "quantity",
        "price"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProductList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Product"
      }
    }
  }
}`))
}
