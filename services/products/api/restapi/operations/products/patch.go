// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchHandlerFunc turns a function with the right signature into a patch handler
type PatchHandlerFunc func(PatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchHandlerFunc) Handle(params PatchParams) middleware.Responder {
	return fn(params)
}

// PatchHandler interface for that can handle valid patch params
type PatchHandler interface {
	Handle(PatchParams) middleware.Responder
}

// NewPatch creates a new http.Handler for the patch operation
func NewPatch(ctx *middleware.Context, handler PatchHandler) *Patch {
	return &Patch{Context: ctx, Handler: handler}
}

/* Patch swagger:route PATCH /{id} products patch

Partially update a product.

*/
type Patch struct {
	Context *middleware.Context
	Handler PatchHandler
}

func (o *Patch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
