// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProductsHandlerFunc turns a function with the right signature into a products handler
type ProductsHandlerFunc func(ProductsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductsHandlerFunc) Handle(params ProductsParams) middleware.Responder {
	return fn(params)
}

// ProductsHandler interface for that can handle valid products params
type ProductsHandler interface {
	Handle(ProductsParams) middleware.Responder
}

// NewProducts creates a new http.Handler for the products operation
func NewProducts(ctx *middleware.Context, handler ProductsHandler) *Products {
	return &Products{Context: ctx, Handler: handler}
}

/* Products swagger:route GET / products products

Get all products.

*/
type Products struct {
	Context *middleware.Context
	Handler ProductsHandler
}

func (o *Products) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProductsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
