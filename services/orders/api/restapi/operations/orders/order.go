// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// OrderHandlerFunc turns a function with the right signature into a order handler
type OrderHandlerFunc func(OrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OrderHandlerFunc) Handle(params OrderParams) middleware.Responder {
	return fn(params)
}

// OrderHandler interface for that can handle valid order params
type OrderHandler interface {
	Handle(OrderParams) middleware.Responder
}

// NewOrder creates a new http.Handler for the order operation
func NewOrder(ctx *middleware.Context, handler OrderHandler) *Order {
	return &Order{Context: ctx, Handler: handler}
}

/* Order swagger:route GET /{id} orders order

Get order by ID.

*/
type Order struct {
	Context *middleware.Context
	Handler OrderHandler
}

func (o *Order) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
